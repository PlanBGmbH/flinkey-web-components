name: Build & Publish Package

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./components
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm i
      - name: Check code style (Prettier)
        run: |
          npm run format:check
      - name: Run Unit Tests
        run: |
          npm run test:unit
      - name: Run E2E Tests
        run: |
          npm run test:e2e
      - name: Build components
        run: |
          npm run build
      - name: Copy README
        run: |
          cp ../README.md README.md
      - name: Copy LICENSE
        run: |
          cp ../LICENSE LICENSE
      - name: Remove node_modules
        run: |
          rm -rf node_modules/
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: flinkey_web_components_artifact
          path: components
  pre_publish_validation:
    name: Pre-Publish Validation
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version_increased: ${{ steps.check_package_version.outputs.version_increased }}
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Download artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: flinkey_web_components_artifact
      - name: Check for package version update
        id: check_package_version
        run: |
          localPackageVersion=$( jq -r '.version' package.json )
          echo "Local package version: $localPackageVersion"
          npmPackageVersion=$( npm show @planbgmbh/flinkey-web-components version )
          echo "Latest package version on NPM: $npmPackageVersion"
          if $(dpkg --compare-versions $localPackageVersion gt $npmPackageVersion);
          then
            echo '::set-output name=version_increased::True'
            echo 'Version updated'
          else
            echo '::set-output name=version_increased::False'
            echo 'Version did not update'
          fi
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: pre_publish_validation
    if: ${{ needs.pre_publish_validation.outputs.version_increased == 'True' }}
    environment: NPM
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Download artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: flinkey_web_components_artifact
      - name: Prepare GitHub release
        run: |
          packageVersion=$( jq -r '.version' package.json )
          echo "packageVersion=$packageVersion" >> $GITHUB_ENV
          zipName="flinkey-web-components-v${packageVersion}.zip"
          echo "zipName=$zipName" >> $GITHUB_ENV
          changelog=$(<CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          rm CHANGELOG.md
      - name: Publish package on NPM
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create GitHub release artifact
        run: |
          touch CHANGELOG.md
          echo "${{ env.changelog }}" >> CHANGELOG.md
          wget --quiet --method GET -O npmPackageData.json "http://registry.npmjs.org/@planbgmbh/flinkey-web-components/${{ env.packageVersion }}"
          tarballUrl=$( jq -r '.dist.tarball' npmPackageData.json )
          wget --quiet --method GET -O npmPackage.tgz "$tarballUrl"
          mkdir unpackedPackage
          tar -zxvf ./npmPackage.tgz -C ./unpackedPackage
          cd ./unpackedPackage/package
          zip -r "../../${{ env.zipName }}" *
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.zipName }}
          bodyFile: "CHANGELOG.md"
          name: ${{ env.packageVersion }}
          tag: "v${{ env.packageVersion }}"
          token: ${{ secrets.GITHUB_TOKEN }}
