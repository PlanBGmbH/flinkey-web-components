name: Run PR Checks

on: 
  [pull_request]

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
        with:
          ref: 'main'
          path: main
      - name: Checkout PR branch
        uses: actions/checkout@v2
        with:
          path: pr
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}
      - name: Check commit authors
        run: |
          echo ${{ toJson(github.event.pull_request.user.login) }}
          wget --quiet --method GET -O commits.json "${{ github.event.pull_request._links.commits.href }}"
          committers=$( jq -r  '[.[] | .committer | .login] | unique' commits.json )
          authors=$( jq -r  '[.[] | .author | .login] | unique' commits.json )
          committersLength=$( jq '. | length' <<< $committers )
          authorsLength=$( jq '. | length' <<< $authors )
          echo "Committer count: $committersLength"
          echo "Author count: $authorsLength"
          if [ $committersLength -gt 1 OR $authorsLength -gt 1 ];
          then
            echo 'There are too many committers and/or authors for a valid PR branch by dependabot[bot]'
            exit 1
          else
            committer=$( jq '.[0]' <<< $committers )
            author=$( jq '.[0]' <<< $authors )
            echo "Committer: $committer"
            echo "Author: $author"
            if [ $committer != "dependabot[bot]" OR $author != "dependabot[bot]" ];
            then
              echo 'Committer and/or author does not have a valid value'
              exit 1
            else
              echo 'Committer and author are valid'
            fi
          fi
      - name: Read PR package version
        run: |
          cd ./pr/components
          prPackageVersion=$( jq -r '.version' package.json )
          echo "prPackageVersion=$prPackageVersion" >> $GITHUB_ENV
          echo "Current PR version: $prPackageVersion"
      - name: Read PR package-lock version
        run: |
          cd ./pr/components
          prPackageLockVersion=$( jq -r '.version' package-lock.json )
          echo "prPackageLockVersion=$prPackageLockVersion" >> $GITHUB_ENV
          echo "Current PR lock version: $prPackageLockVersion"
      - name: Check PR package version
        run: |
          echo "PR lock version ${{ env.prPackageLockVersion }}"
          echo "PR version ${{ env.prPackageVersion }}"
          if $(dpkg --compare-versions ${{ env.prPackageVersion }} eq ${{ env.prPackageLockVersion }});
          then
            echo 'PR package lock version and PR package version are equal'
          else
            echo 'PR package lock version and PR package version are not equal'
            exit 1
          fi
      - name: Check package version update
        run: |
          mainPackageVersion=$( jq -r '.version' ./main/components/package.json )
          echo "Main package version: $mainPackageVersion"
          echo "Reset version of package.json and package-lock.json for diff"
          echo "$( jq '.version = "null"' ./pr/components/package.json )" > ./pr/components/package.json
          echo "$( jq '.version = "null"' ./pr/components/package-lock.json )" > ./pr/components/package-lock.json
          echo "$( jq '.version = "null"' ./main/components/package.json )" > ./main/components/package.json
          echo "$( jq '.version = "null"' ./main/components/package-lock.json )" > ./main/components/package-lock.json
          echo "Calculate diff between main and PR branch"
          diff -qr pr/components main/components && changes=0 || changes=1
          echo "Re-assign version of package.json and package-lock.json"
          echo "$( jq '.version = "${{ env.prPackageVersion }}"' ./pr/components/package.json )" > ./pr/components/package.json
          echo "$( jq '.version = "${{ env.prPackageLockVersion }}"' ./pr/components/package-lock.json )" > ./pr/components/package-lock.json
          echo "Update prPackageVersion environment variable"
          prPackageVersion=$( jq -r '.version' ./pr/components/package.json )
          echo "prPackageVersion=$prPackageVersion" >> $GITHUB_ENV
          if [ $changes -eq 1 ];
          then
            echo 'components directory content changed'
            echo "PR package version: ${{ env.prPackageVersion }}"
            echo "Main package version: $mainPackageVersion"
            if $(dpkg --compare-versions ${{ env.prPackageVersion }} gt $mainPackageVersion);
            then
              echo 'Version updated'
            else
              echo 'Version did not update'
              exit 1
            fi
          else
            echo 'components directory content did not change'
            if $(dpkg --compare-versions ${{ env.prPackageVersion }} ne $mainPackageVersion);
            then
              echo 'Version changed but should not'
              exit 1
            else
              echo 'Version did not change'
            fi
          fi
      - name: Install dependencies
        run: |
          cd ./pr/components
          npm i
      - name: Check code style (Prettier)
        run: |
          cd ./pr/components
          npm run format:check
      - name: Run Unit Tests
        run: |
          cd ./pr/components
          npm run test:unit
      - name: Run E2E Tests
        run: |
          cd ./pr/components
          npm run test:e2e
      - name: Build components
        run: |
          cd ./pr/components
          npm run build