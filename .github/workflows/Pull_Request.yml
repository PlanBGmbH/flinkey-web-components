name: Run PR Checks

on: [pull_request]

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout main
        uses: actions/checkout@v2.4.0
        with:
          ref: "main"
          path: main

      - name: Checkout PR branch
        uses: actions/checkout@v2.4.0
        with:
          path: pr

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.5.1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check commit authors
        shell: bash
        env:
          USER_NAME: "${{ github.event.pull_request.user.login }}"
          LINK: "${{ github.event.pull_request._links.commits.href }}"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/pr/.github/workflows/scripts/author_validation.sh"
          "${GITHUB_WORKSPACE}/pr/.github/workflows/scripts/author_validation.sh"

      - name: Read PR package version
        if: ${{ env.skipVersionValidation == 'False' }}
        run: |
          cd ./pr/components
          prPackageVersion=$( jq -r '.version' package.json )
          echo "prPackageVersion=$prPackageVersion" >> $GITHUB_ENV
          echo "Current PR version: $prPackageVersion"

      - name: Read PR package-lock version
        if: ${{ env.skipVersionValidation == 'False' }}
        run: |
          cd ./pr/components
          prPackageLockVersion=$( jq -r '.version' package-lock.json )
          echo "prPackageLockVersion=$prPackageLockVersion" >> $GITHUB_ENV
          echo "Current PR lock version: $prPackageLockVersion"

      - name: Check PR package version
        if: ${{ env.skipVersionValidation == 'False' }}
        run: |
          echo "PR lock version ${{ env.prPackageLockVersion }}"
          echo "PR version ${{ env.prPackageVersion }}"
          if $(dpkg --compare-versions ${{ env.prPackageVersion }} eq ${{ env.prPackageLockVersion }});
          then
            echo 'PR package lock version and PR package version are equal'
          else
            echo 'PR package lock version and PR package version are not equal'
            exit 1
          fi

      - name: Check package version update
        if: ${{ env.skipVersionValidation == 'False' }}
        run: |
          mainPackageVersion=$( jq -r '.version' ./main/components/package.json )
          echo "Main package version: $mainPackageVersion"
          echo "Reset version of package.json and package-lock.json for diff"
          echo "$( jq '.version = "null"' ./pr/components/package.json )" > ./pr/components/package.json
          echo "$( jq '.version = "null"' ./pr/components/package-lock.json )" > ./pr/components/package-lock.json
          echo "$( jq '.version = "null"' ./main/components/package.json )" > ./main/components/package.json
          echo "$( jq '.version = "null"' ./main/components/package-lock.json )" > ./main/components/package-lock.json
          echo "Calculate diff between main and PR branch"
          diff -qr pr/components main/components && changes=0 || changes=1
          echo "Re-assign version of package.json and package-lock.json"
          echo "$( jq '.version = "${{ env.prPackageVersion }}"' ./pr/components/package.json )" > ./pr/components/package.json
          echo "$( jq '.version = "${{ env.prPackageLockVersion }}"' ./pr/components/package-lock.json )" > ./pr/components/package-lock.json
          echo "Update prPackageVersion environment variable"
          prPackageVersion=$( jq -r '.version' ./pr/components/package.json )
          echo "prPackageVersion=$prPackageVersion" >> $GITHUB_ENV
          if [ $changes -eq 1 ];
          then
            echo 'components directory content changed'
            echo "PR package version: ${{ env.prPackageVersion }}"
            echo "Main package version: $mainPackageVersion"
            if $(dpkg --compare-versions ${{ env.prPackageVersion }} gt $mainPackageVersion);
            then
              echo 'Version updated'
            else
              echo 'Version did not update'
              exit 1
            fi
          else
            echo 'components directory content did not change'
            if $(dpkg --compare-versions ${{ env.prPackageVersion }} ne $mainPackageVersion);
            then
              echo 'Version changed but should not'
              exit 1
            else
              echo 'Version did not change'
            fi
          fi

      - name: Install dependencies
        run: |
          cd ./pr/components
          npm i

      - name: Check code style (Prettier)
        run: |
          cd ./pr/components
          npm run format:check

      - name: Run Unit Tests
        run: |
          cd ./pr/components
          npm run test:unit

      - name: Run E2E Tests
        run: |
          cd ./pr/components
          npm run test:e2e

      - name: Build components
        run: |
          cd ./pr/components
          npm run build
